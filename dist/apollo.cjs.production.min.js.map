{"version":3,"file":"apollo.cjs.production.min.js","sources":["../node_modules/style-inject/dist/style-inject.es.js","../src/components/Text/Text.tsx","../src/components/Button/Button.tsx","../src/components/Checkbox/Checkbox.tsx","../src/components/Modal/Modal.tsx","../src/components/Radio/Radio.tsx","../src/components/Switch/Switch.tsx","../src/components/TextInput/TextInput.tsx"],"sourcesContent":["function styleInject(css, ref) {\n  if ( ref === void 0 ) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') { return; }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nexport default styleInject;\n","import React, { HTMLAttributes, ReactNode } from 'react';\nimport './Text.css';\n\nexport interface Props extends HTMLAttributes<HTMLParagraphElement> {\n    /** Text needs to exist between tags */\n    children: ReactNode;\n    /** Determines whether it is a header or not, number directly relates to the kind of header tag i.e. header={1} => h1 */\n    header?: 0 | 1 | 2 | 3;\n    /** Determines whether the element has margins or not */\n    margins?: boolean;\n    /** Determines whether the element is inline or not */\n    inline?: boolean;\n    /** Determines whether the text is bold or not */\n    bold?: boolean;\n    /** Determines whether the text is italic or not */\n    italic?: boolean;\n    /** Determines whether the text is underline */\n    underline?: boolean;\n    /** Determines whether the text is uppercase or not */\n    upper?: boolean;\n    /** Determines whether the text is lowercase or not */\n    lower?: boolean;\n    /** Determines whether the first letter of every word is capital or not */\n    pascal?: boolean;\n}\n\n/**\n * Typography component for the Apollo Component Library\n */\nexport const Text = ({\n    children, \n    header = 0, \n    margins = true,\n    inline = false,\n    bold = false,\n    italic = false,\n    underline = false,\n    upper = false,\n    lower = false,\n    pascal = false,\n    ...props\n}: Props) => {\n    /**\n     * Gets all the special conditions and translates it to a special className combination granting all conditions\n     * \n     * @returns the full variant title\n     */\n    const getVariant = (): string => {\n        // determine custom variant\n        let customVariant: string = 'apollo-component-library-typography-component ';\n\n        // check if its a header or not\n        if (header == 1) customVariant += 'first-header ';\n        if (header == 2) customVariant += 'second-header ';\n        if (header == 3) customVariant += 'third-header ';\n\n        // check if any of the special cases are met\n        if (!margins) customVariant += 'no-margins ';\n        if (inline) customVariant += 'inline ';\n        if (italic) customVariant += 'italic ';\n        if (bold) customVariant += 'bold '\n        if (underline) customVariant += 'underline ';\n\n        return customVariant;\n    }\n\n    /**\n     * Given a valid string the method will convert the first word of each letter to uppercase and the rest lowercase\n     * \n     * @param target string that needs to be converted\n     * @returns converted string\n     */\n    const convertPascal = (target: string): string => {\n        let outputArr: string[] = target.split(' ').map((word: string) => {\n            return word.charAt(0).toUpperCase() + word.slice(1).toLowerCase();\n        });\n\n        return outputArr.join(' ');\n    }\n\n    /**\n     * If the children object is also a string, it will convert according to the provided properties\n     * \n     * @returns correctly cased string, or corresponding children\n     */\n    const getCorrectCasing = (): string | ReactNode => {\n        if (typeof children === 'string') {\n            switch (true) {\n                case upper: return children.toUpperCase();\n                case lower: return children.toLowerCase();\n                case pascal: return convertPascal(children);\n            }\n        }\n\n        return children;\n    }\n\n    return (\n        <p {...props} className={getVariant()}>{getCorrectCasing()}</p>\n    )\n}","import React, { HTMLAttributes, ReactNode } from 'react';\nimport './Button.css';\n\nexport interface Props extends HTMLAttributes<HTMLButtonElement> {\n    /** Required ReactNode that needs to exist between component tags */\n    children: ReactNode;\n    /** defines the type of button to be rendered */\n    variant?: 'default' | 'secondary';\n    /** callback function to be called when there is a method click */\n    onClick?: () => void;\n    /** will allow for http redirect */\n    href?: string;\n}\n\n/**\n * Button component for the Apollo Component Library\n */\nexport const Button = ({children, href, variant = \"default\", ...props}: Props) => {\n    const button: JSX.Element = (\n        <button {...props} className={`apollo-component-library-button ${variant}`}>\n            {children}\n        </button>\n    )\n\n    // if the href element exists, render it with link capabilities, else just render the standalone button\n    return href ? (<a href={href} target=\"_blank\">{button}</a>) : button;   \n}","import React, { HTMLAttributes, ReactNode } from 'react';\nimport { Text } from '../Text/Text';\nimport './Checkbox.css';\n\nexport interface Props extends HTMLAttributes<HTMLInputElement> {\n    /** Tags must be have value in between */\n    children: ReactNode;\n    /** Value that the checkbox represents */\n    value?: string;\n    /** Determines whether the user can change the input */\n    disabled?: boolean;\n}\n\n/**\n * An input object that is a list of items where a single entry can be selected\n */\nexport const Checkbox = ({children, ...props}: Props) => {\n    return (\n        <label>\n            <input\n                {...props}\n                type=\"checkbox\"\n                className=\"apollo-component-library-checkbox-component\"\n            />\n            <Text inline>{ children }</Text>\n        </label>\n    )\n}","import React, { HTMLAttributes, ReactNode } from 'react';\nimport './Modal.css';\n\nexport interface Props extends HTMLAttributes<HTMLButtonElement> {\n    /** Required ReactNode that needs to exist between component tags */\n    children: ReactNode;\n    /** defines the type of button to be rendered */\n    variant?: 'default' | 'secondary';\n    /** callback function to be called when there is a method click */\n   \n    /** will allow for http redirect */\n    href?: string;\n}\n\n/**\n * Button component for the Apollo Component Library\n */\nexport const Modal = ({children, href, variant = \"default\", ...props}: Props) => {\n    const button: JSX.Element = (\n      <>\n        <button {...props} data-toggle=\"modal\" data-target=\"#exampleModal\" className={`apollo-component-library-button ${variant}`}>\n            {children}\n        </button>\n        \n        </>\n    )\n\n    // if the href element exists, render it with link capabilities, else just render the standalone button\n    return href ? (<a href={href} target=\"_blank\">{button}</a>) : button;   \n}","import React, { HTMLAttributes, ReactNode } from 'react';\nimport { Text } from '../Text/Text'\nimport './Radio.css';\n\nexport interface Props extends HTMLAttributes<HTMLInputElement> {\n    /** You can define an element pertaining to radio */\n    children?: ReactNode;\n    /** Determines whether input is disabled */\n    disabled?: boolean;\n    /** Value that the radio represents*/\n    value?: string;\n}\n\n/** \n * An input object that is a list of items where a single entry can be selected\n */\nexport const Radio = ({children, ...props}: Props) => {\n    return (\n        <label>\n            <input \n                {...props} \n                type=\"radio\" \n                className=\"apollo-component-library-radio-component\"    \n            />\n            <Text inline>{children}</Text>\n        </label>\n    )\n}","import React, { HTMLAttributes, ReactNode } from 'react';\nimport { Text } from '../Text/Text'\nimport './Switch.css';\n\nexport interface Props extends HTMLAttributes<HTMLInputElement> {\n    /** Can assign text or element to switch */\n    children?: ReactNode;\n    /** Determines whether the switch is disabled */\n    disabled?: boolean;\n    /** Value that the switch represents */\n    value?: string;\n    /** Variant of switch */\n    variant?: \"default\" | \"secondary\";\n}\n\n/**\n * UI element that slides a button from on to off.\n */\nexport const Switch = ({children, variant=\"default\", ...props}: Props) => {\n    return (\n        <label className=\"apollo-component-library-switch-component-label\">\n            <input \n                {...props} \n                type=\"checkbox\" \n                role=\"switch\"\n                className=\"apollo-component-library-switch-component-input\"\n            />\n            <span className={`apollo-component-library-switch-component ${variant}`}/>\n            <Text inline>{children}</Text>\n        </label>\n    )\n}","import React, { HTMLAttributes } from 'react';\nimport './TextInput.css'\n\nexport interface Props extends HTMLAttributes<HTMLInputElement> {\n    /** Placeholder text for input */\n    placeholder?: string;\n    /** Determines whether user can type in the text input */\n    disabled?: boolean;\n    /** Determines whether the text input is a password */\n    password?: boolean;\n    /** Determines what type of text input will be shown */\n    variant?: \"default\" | \"secondary\";\n}\n\n/** \n * Text Input from the Apollo Component Library \n */\nexport const TextInput = ({variant = 'default', password = false, ...props}: Props) => {\n    return (\n        <input \n            {...props } \n            className={`apollo-component-library-text-input ${variant}`} \n            type={password ? \"password\" : \"text\"} \n        />\n    )\n}"],"names":["styleInject","css","ref","insertAt","document","head","getElementsByTagName","style","createElement","type","firstChild","insertBefore","appendChild","styleSheet","cssText","createTextNode","Text","customVariant","children","header","margins","inline","bold","italic","underline","upper","lower","pascal","props","React","className","toUpperCase","toLowerCase","split","map","word","charAt","slice","join","getCorrectCasing","href","variant","button","target","role","password"],"mappings":"oRAAA,SAASA,EAAYC,EAAKC,QACX,IAARA,IAAiBA,EAAM,IAC5B,IAAIC,EAAWD,EAAIC,SAEnB,GAAKF,GAA2B,oBAAbG,SAAnB,CAEA,IAAIC,EAAOD,SAASC,MAAQD,SAASE,qBAAqB,QAAQ,GAC9DC,EAAQH,SAASI,cAAc,SACnCD,EAAME,KAAO,WAEI,QAAbN,GACEE,EAAKK,WACPL,EAAKM,aAAaJ,EAAOF,EAAKK,YAKhCL,EAAKO,YAAYL,GAGfA,EAAMM,WACRN,EAAMM,WAAWC,QAAUb,EAE3BM,EAAMK,YAAYR,SAASW,eAAed,uhFCMjCe,EAAO,gBAoBRC,EAnBRC,IAAAA,aACAC,OAAAA,aAAS,QACTC,QAAAA,oBACAC,OAAAA,oBACAC,KAAAA,oBACAC,OAAAA,oBACAC,UAAAA,oBACAC,MAAAA,oBACAC,MAAAA,oBACAC,OAAAA,gBACGC,gBA0DCC,qCAAOD,GAAOE,WAjDVb,EAAwB,iDAGd,GAAVE,IAAaF,GAAiB,iBACpB,GAAVE,IAAaF,GAAiB,kBACpB,GAAVE,IAAaF,GAAiB,iBAG7BG,IAASH,GAAiB,eAC3BI,IAAQJ,GAAiB,WACzBM,IAAQN,GAAiB,WACzBK,IAAML,GAAiB,SACvBO,IAAWP,GAAiB,cAEzBA,KAsBc,cACG,iBAAbC,UACC,QACCO,SAAcP,EAASa,mBACvBL,SAAcR,EAASc,mBACvBL,SAA6BT,EAjBTe,MAAM,KAAKC,KAAI,SAACC,UACtCA,EAAKC,OAAO,GAAGL,cAAgBI,EAAKE,MAAM,GAAGL,iBAGvCM,KAAK,YAiBfpB,EAIiCqB,s6FCjF1B,gBAAErB,IAAAA,SAAUsB,IAAAA,SAAMC,QAAAA,aAAU,YAAcb,SACtDc,EACFb,0CAAYD,GAAOE,6CAA8CW,IAC5DvB,UAKFsB,EAAQX,qBAAGW,KAAMA,EAAMG,OAAO,UAAUD,GAAeA,oBCT1C,gBAAExB,IAAAA,SAAaU,gBAE/BC,6BACIA,yCACQD,GACJnB,KAAK,WACLqB,UAAU,iDAEdD,gBAACb,GAAKK,WAASH,mBCPN,gBAAEA,IAAAA,SAAUsB,IAAAA,SAAMC,QAAAA,aAAU,YAAcb,SACrDc,EACJb,gCACEA,0CAAYD,iBAAmB,sBAAoB,gBAAgBE,6CAA8CW,IAC5GvB,WAOFsB,EAAQX,qBAAGW,KAAMA,EAAMG,OAAO,UAAUD,GAAeA,iBCZ7C,gBAAExB,IAAAA,SAAaU,gBAE5BC,6BACIA,yCACQD,GACJnB,KAAK,QACLqB,UAAU,8CAEdD,gBAACb,GAAKK,WAAQH,oBCNJ,gBAAEA,IAAAA,aAAUuB,QAAAA,aAAQ,YAAcb,gBAEhDC,yBAAOC,UAAU,mDACbD,yCACQD,GACJnB,KAAK,WACLmC,KAAK,SACLd,UAAU,qDAEdD,wBAAMC,uDAAwDW,IAC9DZ,gBAACb,GAAKK,WAAQH,sCCXD,oBAAEuB,QAAAA,aAAU,gBAAWI,SAAAA,gBAAqBjB,gBAE7DC,yCACQD,GACJE,iDAAkDW,EAClDhC,KAAMoC,EAAW,WAAa"}