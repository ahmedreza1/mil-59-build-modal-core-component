{"version":3,"file":"apollo.cjs.development.js","sources":["../src/components/Button/Button.tsx","../src/components/TextInput/TextInput.tsx","../src/components/Text/Text.tsx","../src/components/Checkbox/Checkbox.tsx","../src/components/Radio/Radio.tsx","../src/components/Switch/Switch.tsx","../src/components/Modal/Modal.tsx"],"sourcesContent":["import React, { HTMLAttributes, ReactNode } from 'react';\nimport './Button.css';\n\nexport interface Props extends HTMLAttributes<HTMLButtonElement> {\n    /** Required ReactNode that needs to exist between component tags */\n    children: ReactNode;\n    /** defines the type of button to be rendered */\n    variant?: 'default' | 'secondary';\n    /** callback function to be called when there is a method click */\n    onClick?: () => void;\n    /** will allow for http redirect */\n    href?: string;\n}\n\n/**\n * Button component for the Apollo Component Library\n */\nexport const Button = ({children, href, variant = \"default\", ...props}: Props) => {\n    const button: JSX.Element = (\n        <button {...props} className={`apollo-component-library-button ${variant}`}>\n            {children}\n        </button>\n    )\n\n    // if the href element exists, render it with link capabilities, else just render the standalone button\n    return href ? (<a href={href} target=\"_blank\">{button}</a>) : button;   \n}","import React, { HTMLAttributes } from 'react';\nimport './TextInput.css'\n\nexport interface Props extends HTMLAttributes<HTMLInputElement> {\n    /** Placeholder text for input */\n    placeholder?: string;\n    /** Determines whether user can type in the text input */\n    disabled?: boolean;\n    /** Determines whether the text input is a password */\n    password?: boolean;\n    /** Determines what type of text input will be shown */\n    variant?: \"default\" | \"secondary\";\n}\n\n/** \n * Text Input from the Apollo Component Library \n */\nexport const TextInput = ({variant = 'default', password = false, ...props}: Props) => {\n    return (\n        <input \n            {...props } \n            className={`apollo-component-library-text-input ${variant}`} \n            type={password ? \"password\" : \"text\"} \n        />\n    )\n}","import React, { HTMLAttributes, ReactNode } from 'react';\nimport './Text.css';\n\nexport interface Props extends HTMLAttributes<HTMLParagraphElement> {\n    /** Text needs to exist between tags */\n    children: ReactNode;\n    /** Determines whether it is a header or not, number directly relates to the kind of header tag i.e. header={1} => h1 */\n    header?: 0 | 1 | 2 | 3;\n    /** Determines whether the element has margins or not */\n    margins?: boolean;\n    /** Determines whether the element is inline or not */\n    inline?: boolean;\n    /** Determines whether the text is bold or not */\n    bold?: boolean;\n    /** Determines whether the text is italic or not */\n    italic?: boolean;\n    /** Determines whether the text is underline */\n    underline?: boolean;\n    /** Determines whether the text is uppercase or not */\n    upper?: boolean;\n    /** Determines whether the text is lowercase or not */\n    lower?: boolean;\n    /** Determines whether the first letter of every word is capital or not */\n    pascal?: boolean;\n}\n\n/**\n * Typography component for the Apollo Component Library\n */\nexport const Text = ({\n    children, \n    header = 0, \n    margins = true,\n    inline = false,\n    bold = false,\n    italic = false,\n    underline = false,\n    upper = false,\n    lower = false,\n    pascal = false,\n    ...props\n}: Props) => {\n    /**\n     * Gets all the special conditions and translates it to a special className combination granting all conditions\n     * \n     * @returns the full variant title\n     */\n    const getVariant = (): string => {\n        // determine custom variant\n        let customVariant: string = 'apollo-component-library-typography-component ';\n\n        // check if its a header or not\n        if (header == 1) customVariant += 'first-header ';\n        if (header == 2) customVariant += 'second-header ';\n        if (header == 3) customVariant += 'third-header ';\n\n        // check if any of the special cases are met\n        if (!margins) customVariant += 'no-margins ';\n        if (inline) customVariant += 'inline ';\n        if (italic) customVariant += 'italic ';\n        if (bold) customVariant += 'bold '\n        if (underline) customVariant += 'underline ';\n\n        return customVariant;\n    }\n\n    /**\n     * Given a valid string the method will convert the first word of each letter to uppercase and the rest lowercase\n     * \n     * @param target string that needs to be converted\n     * @returns converted string\n     */\n    const convertPascal = (target: string): string => {\n        let outputArr: string[] = target.split(' ').map((word: string) => {\n            return word.charAt(0).toUpperCase() + word.slice(1).toLowerCase();\n        });\n\n        return outputArr.join(' ');\n    }\n\n    /**\n     * If the children object is also a string, it will convert according to the provided properties\n     * \n     * @returns correctly cased string, or corresponding children\n     */\n    const getCorrectCasing = (): string | ReactNode => {\n        if (typeof children === 'string') {\n            switch (true) {\n                case upper: return children.toUpperCase();\n                case lower: return children.toLowerCase();\n                case pascal: return convertPascal(children);\n            }\n        }\n\n        return children;\n    }\n\n    return (\n        <p {...props} className={getVariant()}>{getCorrectCasing()}</p>\n    )\n}","import React, { HTMLAttributes, ReactNode } from 'react';\nimport { Text } from '../Text/Text';\nimport './Checkbox.css';\n\nexport interface Props extends HTMLAttributes<HTMLInputElement> {\n    /** Tags must be have value in between */\n    children: ReactNode;\n    /** Value that the checkbox represents */\n    value?: string;\n    /** Determines whether the user can change the input */\n    disabled?: boolean;\n}\n\n/**\n * An input object that is a list of items where a single entry can be selected\n */\nexport const Checkbox = ({children, ...props}: Props) => {\n    return (\n        <label>\n            <input\n                {...props}\n                type=\"checkbox\"\n                className=\"apollo-component-library-checkbox-component\"\n            />\n            <Text inline>{ children }</Text>\n        </label>\n    )\n}","import React, { HTMLAttributes, ReactNode } from 'react';\nimport { Text } from '../Text/Text'\nimport './Radio.css';\n\nexport interface Props extends HTMLAttributes<HTMLInputElement> {\n    /** You can define an element pertaining to radio */\n    children?: ReactNode;\n    /** Determines whether input is disabled */\n    disabled?: boolean;\n    /** Value that the radio represents*/\n    value?: string;\n}\n\n/** \n * An input object that is a list of items where a single entry can be selected\n */\nexport const Radio = ({children, ...props}: Props) => {\n    return (\n        <label>\n            <input \n                {...props} \n                type=\"radio\" \n                className=\"apollo-component-library-radio-component\"    \n            />\n            <Text inline>{children}</Text>\n        </label>\n    )\n}","import React, { HTMLAttributes, ReactNode } from 'react';\nimport { Text } from '../Text/Text'\nimport './Switch.css';\n\nexport interface Props extends HTMLAttributes<HTMLInputElement> {\n    /** Can assign text or element to switch */\n    children?: ReactNode;\n    /** Determines whether the switch is disabled */\n    disabled?: boolean;\n    /** Value that the switch represents */\n    value?: string;\n    /** Variant of switch */\n    variant?: \"default\" | \"secondary\";\n}\n\n/**\n * UI element that slides a button from on to off.\n */\nexport const Switch = ({children, variant=\"default\", ...props}: Props) => {\n    return (\n        <label className=\"apollo-component-library-switch-component-label\">\n            <input \n                {...props} \n                type=\"checkbox\" \n                role=\"switch\"\n                className=\"apollo-component-library-switch-component-input\"\n            />\n            <span className={`apollo-component-library-switch-component ${variant}`}/>\n            <Text inline>{children}</Text>\n        </label>\n    )\n}","import React, { HTMLAttributes, ReactNode } from 'react';\nimport './Modal.css';\n\nexport interface Props extends HTMLAttributes<HTMLButtonElement> {\n    /** Required ReactNode that needs to exist between component tags */\n    children: ReactNode;\n    /** defines the type of button to be rendered */\n    variant?: 'default' | 'secondary';\n    /** callback function to be called when there is a method click */\n   \n    /** will allow for http redirect */\n    href?: string;\n}\n\n/**\n * Button component for the Apollo Component Library\n */\nexport const Modal = ({children, href, variant = \"default\", ...props}: Props) => {\n    const button: JSX.Element = (\n      <>\n        <button {...props} data-toggle=\"modal\" data-target=\"#exampleModal\" className={`apollo-component-library-button ${variant}`}>\n            {children}\n        </button>\n        \n        </>\n    )\n\n    // if the href element exists, render it with link capabilities, else just render the standalone button\n    return href ? (<a href={href} target=\"_blank\">{button}</a>) : button;   \n}"],"names":["Button","children","href","variant","props","button","React","className","target","TextInput","password","type","Text","header","margins","inline","bold","italic","underline","upper","lower","pascal","getVariant","customVariant","convertPascal","outputArr","split","map","word","charAt","toUpperCase","slice","toLowerCase","join","getCorrectCasing","Checkbox","Radio","Switch","role","Modal"],"mappings":"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"}